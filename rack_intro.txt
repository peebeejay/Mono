To create a very simple Rack server, we need to follow a few basic steps:
1. Require the rack library
2. Create an object that responds to a #call method
3. #call method should take one argument, conventionally called env, that bundles all the data about the request.
  - env contains all the data about the request
4. The #call method should return an array with 3 elements
  - a. HTTP status code ~ [200, 404, 422, 301, 302...]
  - b. hash of headers
  - c. response body

5. pass the object to Rack::Server#start

require('rack')

class App
  def call(env)
    http_status = '200'
    headers = { 'Content-Type' => 'text/html' }
    body = ['hello world']

    [http_status, headers, body]
  end
end

Rack::Server.start(
  app: App.new
)



Rack as a simple web framework:
1. Rack::Request & Rack::Response classes abstract HTTP request and reponse strings into Ruby objects. We can then examine
   and manipulate these request and response objects using methods, and leave the actual parsing and creation of raw HTTP
   strings to Rack.

   Ex:
    app = Proc.new do |env|
      req = Rack::Request.new(env)
      res = Rack::Request.new
      MyController.new(req, res).go
      res.finish
    end

    Rack::Server.start(
      app: app,
      Port: 3000
    )

In this case, we use a Proc object instead of creating a new class, since a Proc object in Ruby already responds to the #call
  method.

We give the app to Rack and tell it to start the server on port 3000. It will then take incoming requests from the server
  and parse and package up the request string into an env object.

App then takes the env object and generates a Rack::Request object from it, also creates a blank Rack::Response object
  so we don't have to worry about correctly serializing and formatting a HTTP response outselves.

req and res are then passed to a MyController object - which is initialized and then the instance method MyController#go is called.
  This constructs the response object.

To complete the request / response cycle, you MUST call Rack::Response#finish. The Rack::Response object will be returned to Rack
  where it will be serialized, turned into a response string, and then given to the web server to hand back to the client.
