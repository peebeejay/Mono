Rack Middleware:

- Building a framework on Rack gives us the ablity to easily add additional middleware to our framework using the
  Rack::Builder DSL ~ this allows our program to do something with the request before it's processed by the final
  application.

Middleware examples:
  1. Return a response immediately
  2. Alter headers and then pass the request along
  3. Result in a side effect such as setting an instance variable in the application.
  4. No set rules for what a middleware should do to be considered middleware.

Rack::Builder.new will return a new Rack::Builder object. Calling #to_app on this object will convert it
  into the type of object that is needed to pass it into Rack::Server#start.


Middleware Example:

require('rack')

class AdminAuth
  attr_reader :app
  def initialize(app)
    @app = app
  end

  def call(env)
    req = Rack::Request.new(env)

    # here we are deciding whether to bypass the middleware
    if req.path.match(/^\/admin/)
      # uses methods defined in middleware to verify request
      authenticate_admin(req)
    else
      # skips any middleware functionality
      app.call(env)
    end
  end

  private def authenticate_admin(req)
    if valid_admin?(req)
      # passes request on to next middleware
      app.call(req.env)
    else
      # stops progress in the stack and immediately returns a '401' response
      ['401', {}, ["Unauthorized"]]
    end
  end

  def valid_admin?(req)
    req.params['username'] == 'admin' && req.params['password'] == 'password123'
  end
end

hello_app = Proc.new { |env| ['200', {}, ["Hello blah"]] }

app = Rack::Builder.new do
  use AdminAuth
  run hello_app
end.to_app

Rack::Server.start(
  app: app,
  port: 9292
)
